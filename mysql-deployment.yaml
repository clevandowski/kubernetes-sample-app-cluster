apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: app-cluster
  name: mysql
  # namespace: tooling
  labels:
    app: mysql

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: app-cluster
  name: mysql
  labels:
    app: mysql
rules:
- apiGroups:
  - ""
  resources:
  - "services"
  - "namespaces"
  - "endpoints"
  verbs:
  - "get"

---

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: app-cluster
  name: mysql
  labels:
    app: mysql
subjects:
- kind: ServiceAccount
  name: mysql
  namespace: app-cluster
  apiGroup: ""
roleRef:
  kind: Role
  name: mysql
  apiGroup: ""

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
    tier: mysql
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: mysql-pv-claim
#   labels:
#     app: mysql
# spec:
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 2Gi
---
apiVersion: apps/v1
kind: StatefulSet
# apiVersion: extensions/v1beta1
# kind: Deployment
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql
  template:
    metadata:
      labels:
        app: mysql
        tier: mysql
    spec:
      serviceAccountName: mysql
      securityContext:
        runAsUser: 999
        fsGroup: 999
      containers:
      - image: mysql:5.7
        name: mysql
        # command: ["ls"]
        # args: ["-l", "/var/lib/mysql"]
        args: ["--ignore-db-dir", "lost+found"]
        env:
          # $ kubectl create secret generic mysql-pass --from-file=password.txt
          # make sure password.txt does not have a trailing newline
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password.txt
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      # volumes:
      # - name: mysql-persistent-storage
      #   persistentVolumeClaim:
      #     claimName: mysql-pv-claim
      # nodeSelector:
      #    kops.k8s.io/instancegroup: preprod
  volumeClaimTemplates:
  - metadata:
      name: mysql-persistent-storage
      # annotations:
      #   volume.beta.kubernetes.io/storage-class: "standard"
    spec:
      storageClassName: standard
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 2Gi
